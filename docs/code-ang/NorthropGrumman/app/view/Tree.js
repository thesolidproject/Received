/*
 * File: app/view/Tree.js
 *
 * This file was generated by Sencha Architect version 4.1.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('WorkflowWidget.view.Tree', {
    extend: 'Ext.Container',
    alias: 'widget.tree',
    xtype: 'horizontalTree',

    requires: [
        'WorkflowWidget.view.TreeViewController',
        'Ext.d3.hierarchy.tree.HorizontalTree',
        'Ext.d3.axis.Color',
        'Ext.d3.interaction.PanZoom',
        'WorkflowWidget.view.NodeViewModel',
        'Ext.grid.Grid',
        'WorkflowWidget.view.WorkflowFlourish'
    ],

    controller: 'tree',
    viewModel: {
        type: 'node'
    },

    itemId: 'treeView',
    layout: 'vbox',
    align: 'stretch',
    shadow: true,

    items: [
        /*{
            xtype: 'flourish',
            flex: 1
        },
		 */
        {
            xtype: 'grid',
            flex: 1,
            bind: {
                store: '{store}'
            },
            columns: [
                {text: 'State ID', dataIndex: 'id', autoSizeColumn: true},
                {text: 'State Name', dataIndex: 'name', autoSizeColumn: true}
            ]
        },
        {
            xtype: 'titlebar',
            docked: 'top',

            items: [{
                    xtype: 'button',
                    text: 'Northrop Grumman',
                    align: 'center'
                },
                {
                    xtype: 'button',
                    text: 'Button 2',
                    align: 'right'
                }
            ]
        },
        {
            xtype: 'd3-tree',
            flex: 1,
            nodeText: function(tree, node) {

                var text = "State ID: " + node.data.id;

                return text;
            },
            rootVisible: false,
            tooltip: {
                renderer: 'onTooltip'
            },
            nodeSize: [
                20,
                100
            ],
            bind: {
                store: '{store}'
            },
            colorAxis: {
                field: 'id'
            },
            interactions: {
                type: 'panzoom',
                zoom: {
                    extent: [0.3, 3],
                    doubleTap: false
                }
            },
            platformConfig: {
                desktop: {
                    nodeSize: [20, 270],
                    nodeRadius: 15
                }
            }
        },
        {
            xtype: 'button',
            ui: 'action',
            docked: 'bottom',
            maxWidth: 100,
            text: 'Toggle View',
            action: 'ToggleView'
        }
    ]
});
